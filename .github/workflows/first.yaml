name: CI/CD Pipeline for Node.js App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 3: Install dependencies
      - name: Install dependencies
        working-directory: ./node
        run: npm install

      # Step 4: Run tests
      - name: Run tests
        working-directory: ./node
        run: npm test

      # Step 5: Build Docker image (optional, only if you want to use Docker)
      - name: Build Docker image
        working-directory: ./node
        run: docker build -t node-app .

      # Step 6: Deploy to EC2 instance
      - name: Deploy to EC2
        env:
          EC2_IP: ${{ secrets.EC2_IP }} # EC2 public IP or DNS
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # SSH private key stored in GitHub Secrets
        run: |
          # Store the SSH private key to a file
          echo "$EC2_SSH_PRIVATE_KEY" > private-key.pem
          chmod 600 private-key.pem  # Set the correct permissions for the private key

          # Connect to the EC2 instance using SSH and deploy the app
          ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@$EC2_IP << 'EOF'
            # Update packages and install Node.js, npm, and pm2 if not installed
            sudo apt-get update -y
            sudo apt-get install -y nodejs npm
            sudo npm install -g pm2  # Install pm2 globally for process management

            # Navigate to the app directory (create it if it doesn't exist)
            cd /home/ubuntu
            mkdir -p node-app
            cd node-app

            # Pull the latest changes from GitHub (assuming Git is installed)
            git pull origin main || git clone https://github.com/rajnages/GithubActions.git .  # Adjust the repo URL

            # Install dependencies
            cd node && npm install

            # Stop the previous app if running
            pm2 stop node-app || true  # Stop if the app is already running
            pm2 start app.js --name "node-app"  # Replace app.js with your entry file name

            # Ensure pm2 restarts the app on reboot
            pm2 startup
            pm2 save
          EOF

          # Clean up private key after SSH connection
          rm private-key.pem
